{"version":3,"sources":["logo.png","component/BoxHeaderButton.js","component/WaiterButton.js","component/BoxHeader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BoxHeaderButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","buttonOnClick","react_default","a","createElement","type","onClick","rol","Component","WaiterButton","className","id","src_component_BoxHeaderButton","customOnButtonClick","breakfast","lunch","BoxHeader","ReactDom","render","src_component_WaiterButton","document","getElementById","Kitchen_default","src","BoxHeaderLogo","alt","Kitchen","App","src_component_BoxHeader","Boolean","window","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0UCmBzBC,qBAbX,SAAAA,EAAaC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFJA,6EAKfG,KAAKJ,MAAMW,iDAGX,OACIC,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAAWZ,KAAKI,aAAcJ,KAAKJ,MAAMiB,YAX7CC,cCkBfC,8NAXP,OACIP,EAAAC,EAAAC,cAAA,WAASM,UAAU,aACnBR,EAAAC,EAAAC,cAAA,OAAKO,GAAI,iBACTT,EAAAC,EAAAC,cAACQ,EAAD,CAAiBL,IAAI,WAAWM,oBAAqBnB,KAAKoB,YAC1DZ,EAAAC,EAAAC,cAACQ,EAAD,CAAiBL,IAAI,WAAWM,oBAAqBnB,KAAKqB,iBAX3CP,+BCuBZQ,yLAjBXC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAiBC,SAASC,eAAe,oDAGzDJ,IAASC,OAAOhB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,MAAYiB,SAASC,eAAe,mDAIpD,OACAnB,EAAAC,EAAAC,cAAA,OAAKO,GAAI,aACPT,EAAAC,EAAAC,cAAA,OAAKmB,IAAKC,IAAed,UAAY,gBAAgBe,IAAI,SACzDvB,EAAAC,EAAAC,cAAA,UAAQM,UAAW,kBAAkBC,GAAG,cAAxC,IAAsDT,EAAAC,EAAAC,cAACQ,EAAD,CAAiBL,IAAM,SAASM,oBAAsBnB,KAAKe,gBACjHP,EAAAC,EAAAC,cAAA,UAAQM,UAAW,kBAAkBC,GAAG,cAAxC,IAAsDT,EAAAC,EAAAC,cAACQ,EAAD,CAAiBL,IAAM,SAAQM,oBAAsBnB,KAAKgC,mBAb9FlB,aCMTmB,mLARX,OACAzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAD,cAJYpB,aCQEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAShB,OAAOhB,EAAAC,EAAAC,cAAC+B,EAAD,MAASf,SAASC,eAAe,SD2H3C,kBAAmBe,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.52f70336.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9f59266a.png\";","import React, {Component} from 'react';\nimport './BoxHeaderButton.css';\nimport './BoxHeader';\n\nclass BoxHeaderButton extends Component{\n\n    constructor (props){\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(){\n        this.props.buttonOnClick();\n    }\n    render(){\n        return(\n            <button type=\"button\" onClick = {this.handleClick}>{this.props.rol}</button> \n        )\n    }\n}    \nexport default BoxHeaderButton;\n\n\n\n/*     render (){\n        return(\n            <div className= \"BoxHeaderButton\">\n                <button className=\"HeaderButton\">Meser@</button>\n                <button className=\"HeaderButton\">Cocina</button>\n            </div>\n        )\n    }\n\n\n\n}\n    export default BoxHeaderButton;\n */\n   /*  constructor (props){\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(){\n        this.props.buttonOnClick();\n    }\n    render(){\n        return(\n            <button type=\"button\" onClick = {this.handleClick}>{this.props.roles}</button> \n        )\n    }\n}    \nexport default BoxHeaderButton; */","import React, {Component} from 'react';\nimport './WaiterButton.css';\nimport BoxHeaderButton from './BoxHeaderButton';\n\nclass WaiterButton extends Component{\n    breakfast(){\n\n    }\n\n    lunch(){\n\n        return (\n            <article className=\"breakfast\">\n            <div id= \"containerMenu\">\n            <BoxHeaderButton rol=\"Desayuno\" customOnButtonClick={this.breakfast}/>\n            <BoxHeaderButton rol=\"Almuerzo\" customOnButtonClick={this.lunch}/>\n            </div>\n            </article>\n        )\n    }\n}\n\nexport default WaiterButton;\n","import React, {Component} from 'react'\nimport ReactDom from 'react-dom';\nimport './BoxHeader.css';\nimport BoxHeaderLogo from '../logo.png';\nimport BoxHeaderButton from './BoxHeaderButton';\nimport WaiterButton from './WaiterButton';\nimport Kitchen from './Kitchen';\n\nclass BoxHeader extends Component {\n  WaiterButton (){\n    ReactDom.render(<WaiterButton/>, document.getElementById('containerMenu'))\n  }\n  Kitchen (){\n    ReactDom.render(<Kitchen/>, document.getElementById('conteinerMenu'))\n  }\n  \n  render () {\n    return (\n    <div id= \"BoxHeader\">\n      <img src={BoxHeaderLogo} className = \"BoxHeaderLogo\" alt=\"logo\"/>\n      <button className =\"BoxHeaderButton\" id=\"initbutton\"> <BoxHeaderButton rol = \"Meser@\" customOnButtonClick ={this.WaiterButton}/></button>\n      <button className =\"BoxHeaderButton\" id=\"initbutton\"> <BoxHeaderButton rol = \"Cocina\"customOnButtonClick ={this.Kitchen}/></button>\n    </div> \n    );\n  }\n}\n\nexport default BoxHeader;","import React, {Component} from 'react';\nimport './App.css';\nimport BoxHeader from './component/BoxHeader';\n\nclass App extends Component {\n  render () {\n    return (\n    <div>\n      <BoxHeader/>\n    </div>  \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}